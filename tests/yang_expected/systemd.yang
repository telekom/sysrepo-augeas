module systemd {
  namespace "aug:systemd";
  prefix aug;

  import augeas-extension {
    prefix augex;
  }

  augex:augeas-mod-name "Systemd";

  grouping include {
    container include {
      augex:data-path "$$";
      augex:value-yang-path "sto_value";
      presence "Config entry.";
      leaf label {
        mandatory true;
        type string {
          pattern "\\.include";
        }
      }
      leaf sto_value {
        mandatory true;
        type string {
          pattern "[^# \t\n]*[^# \t\n\\\\]";
        }
      }
    }
  }
  list systemd {
    key "config-file";
    leaf config-file {
      type string;
    }
    list include-list {
      key "_id";
      ordered-by user;
      leaf _id {
        type uint64;
        description
          "Implicitly generated list key to maintain the order of the augeas data.";
      }
      uses include;
    }
    list record-list {
      key "_id";
      ordered-by user;
      leaf _id {
        type uint64;
        description
          "Implicitly generated list key to maintain the order of the augeas data.";
      }
      container record {
        augex:data-path "$$";
        presence "Config entry.";
        leaf label {
          mandatory true;
          type string {
            pattern "#commen((t[^\\]\n/]|[^\\]\n/t])[^\\]\n/]*|())|#comme([^\\]\n/n][^\\]\n/]*|())|#comm([^\\]\n/e][^\\]\n/]*|())|#com([^\\]\n/m][^\\]\n/]*|())|#co([^\\]\n/m][^\\]\n/]*|())|#c([^\\]\n/o][^\\]\n/]*|())|(#[^\\]\n/c]|[^\\]\n#/][^\\]\n/])[^\\]\n/]*|#|[^\\]\n#/]";
          }
        }
        list config-entries {
          key "_id";
          ordered-by user;
          leaf _id {
            type uint64;
            description
              "Implicitly generated list key to maintain the order of the augeas data.";
          }
          choice ch_config-entries {
            mandatory true;
            container entry_single {
              augex:data-path "Description";
              presence "Config entry.";
              leaf value {
                type string {
                  pattern "([^# \t\n\\\\][^#\n\\\\]*[^# \t\n\\\\]|[^# \t\n\\\\])(((\\\\\n)([^# \t\n\\\\][^#\n\\\\]*[^# \t\n\\\\]|[^# \t\n\\\\]))*)";
                }
                augex:data-path "value";
              }
            }
            container entry_multi {
              augex:data-path "$$";
              presence "Config entry.";
              leaf entry_multi_kw {
                mandatory true;
                type string {
                  pattern "Descriptio((n[.0-9A-Z_a-z-]|[.0-9A-Z_a-mo-z-])[.0-9A-Z_a-z-]*|())|Descripti([.0-9A-Z_a-np-z-][.0-9A-Z_a-z-]*|())|Descript([.0-9A-Z_a-hj-z-][.0-9A-Z_a-z-]*|())|Descrip([.0-9A-Z_a-su-z-][.0-9A-Z_a-z-]*|())|Descri([.0-9A-Z_a-oq-z-][.0-9A-Z_a-z-]*|())|Descr([.0-9A-Z_a-hj-z-][.0-9A-Z_a-z-]*|())|Desc([.0-9A-Z_a-qs-z-][.0-9A-Z_a-z-]*|())|Des([.0-9A-Z_abd-z-][.0-9A-Z_a-z-]*|())|De([.0-9A-Z_a-rt-z-][.0-9A-Z_a-z-]*|())|Environmen((t[.0-9A-Z_a-z-]|[.0-9A-Z_a-su-z-])[.0-9A-Z_a-z-]*|())|Environme([.0-9A-Z_a-mo-z-][.0-9A-Z_a-z-]*|())|Environm([.0-9A-Z_a-df-z-][.0-9A-Z_a-z-]*|())|Environ([.0-9A-Z_a-ln-z-][.0-9A-Z_a-z-]*|())|Enviro([.0-9A-Z_a-mo-z-][.0-9A-Z_a-z-]*|())|Envir([.0-9A-Z_a-np-z-][.0-9A-Z_a-z-]*|())|Envi([.0-9A-Z_a-qs-z-][.0-9A-Z_a-z-]*|())|Env([.0-9A-Z_a-hj-z-][.0-9A-Z_a-z-]*|())|Exec([.0-9_-][.0-9A-Z_a-z-]*|[A-Za-z]|())|Exe([.0-9A-Z_abd-z-][.0-9A-Z_a-z-]*|())|(Ex[.0-9A-Z_a-df-z-]|En[.0-9A-Z_a-uw-z-]|(E[.0-9A-Z_a-mo-wyz-]|D[.0-9A-Z_a-df-z-]|[A-CF-Za-z][.0-9A-Z_a-z-])[.0-9A-Z_a-z-])[.0-9A-Z_a-z-]*|Ex|En|E[.0-9A-Z_a-mo-wyz-]|D[.0-9A-Z_a-df-z-]|[A-CF-Za-z][.0-9A-Z_a-z-]";
                }
              }
              leaf-list value {
                type string {
                  pattern "[^# \t\n]*[^# \t\n\\\\]";
                }
                ordered-by user;
                augex:data-path "value";
              }
            }
            container entry_command {
              augex:data-path "$$";
              presence "Config entry.";
              leaf entry_command_kw {
                mandatory true;
                type string {
                  pattern "Exec[A-Za-z][A-Za-z0-9._-]+";
                }
              }
              leaf ignoreexit {
                type empty;
                augex:data-path "ignoreexit";
              }
              leaf arg0 {
                type empty;
                augex:data-path "arg0";
              }
              leaf command {
                type string {
                  pattern "[^#@ \t\n\\-][^#@ \t\n\\-][^# \t\n\\\\]*";
                }
                augex:data-path "command";
              }
              container arguments {
                augex:data-path "arguments";
                presence "Config entry.";
                list args-list {
                  key "_id";
                  min-elements 1;
                  ordered-by user;
                  leaf _id {
                    type uint64;
                    description
                      "Implicitly generated list key to maintain the order of the augeas data.";
                  }
                  container args {
                    augex:data-path "$$";
                    augex:value-yang-path "sto_value";
                    presence "Config entry.";
                    leaf args {
                      mandatory true;
                      type uint64;
                    }
                    leaf sto_value {
                      mandatory true;
                      type string {
                        pattern "[^# \t\n]*[^# \t\n\\\\]";
                      }
                    }
                  }
                }
              }
            }
            container entry_env {
              augex:data-path "Environment";
              presence "Config entry.";
              list env_key-list {
                key "_id";
                min-elements 1;
                ordered-by user;
                leaf _id {
                  type uint64;
                  description
                    "Implicitly generated list key to maintain the order of the augeas data.";
                }
                container env_key {
                  augex:data-path "$$";
                  augex:value-yang-path "value";
                  presence "Config entry.";
                  leaf env_key {
                    mandatory true;
                    type string {
                      pattern "[A-Za-z0-9_]+(\\[[0-9]+\\])?";
                    }
                  }
                  leaf value {
                    type union {
                      type string {
                        pattern "[^#'\" \t\n]*[^#'\" \t\n\\\\]";
                      }
                      type string {
                        pattern "\"[^#\"\t\n]*[^#\"\t\n\\\\]\"";
                      }
                      type string {
                        pattern "'[^#'\t\n]*[^#'\t\n\\\\]'";
                      }
                      type string {
                        pattern "[^#\"'\n]*[ \t]+[^#\"'\n]*";
                      }
                    }
                  }
                }
              }
            }
            case include {
              uses include;
            }
          }
        }
      }
    }
  }
}
