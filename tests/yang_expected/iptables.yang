module iptables {
  yang-version 1.1;
  namespace "aug:iptables";
  prefix aug;

  import augeas-extension {
    prefix augex;
  }

  augex:augeas-mod-name "Iptables";

  grouping ipt-match {
    list ipt-match {
      key "_id";
      ordered-by user;
      leaf _id {
        type uint64;
        description
          "Implicitly generated list key to maintain the order of the augeas data.";
      }
      choice ch-ipt-match {
        mandatory true;
        container protocol {
          augex:data-path "protocol";
          augex:value-yang-path "value";
          presence "Config entry.";
          leaf value {
            mandatory true;
            type string {
              pattern "(![ \t]*)?[^ \t\n!-][^ \t\n]*";
            }
          }
          leaf not {
            type empty;
            augex:data-path "not";
          }
        }
        container source {
          augex:data-path "source";
          augex:value-yang-path "value";
          presence "Config entry.";
          leaf value {
            mandatory true;
            type string {
              pattern "(![ \t]*)?[^ \t\n!-][^ \t\n]*";
            }
          }
          leaf not {
            type empty;
            augex:data-path "not";
          }
        }
        container destination {
          augex:data-path "destination";
          augex:value-yang-path "value";
          presence "Config entry.";
          leaf value {
            mandatory true;
            type string {
              pattern "(![ \t]*)?[^ \t\n!-][^ \t\n]*";
            }
          }
          leaf not {
            type empty;
            augex:data-path "not";
          }
        }
        leaf jump {
          type string {
            pattern "(![ \t]*)?[^ \t\n!-][^ \t\n]*";
          }
          augex:data-path "jump";
        }
        leaf goto {
          type string {
            pattern "(![ \t]*)?[^ \t\n!-][^ \t\n]*";
          }
          augex:data-path "goto";
        }
        container in-interface {
          augex:data-path "in-interface";
          augex:value-yang-path "value";
          presence "Config entry.";
          leaf value {
            mandatory true;
            type string {
              pattern "(![ \t]*)?[^ \t\n!-][^ \t\n]*";
            }
          }
          leaf not {
            type empty;
            augex:data-path "not";
          }
        }
        container out-interface {
          augex:data-path "out-interface";
          augex:value-yang-path "value";
          presence "Config entry.";
          leaf value {
            mandatory true;
            type string {
              pattern "(![ \t]*)?[^ \t\n!-][^ \t\n]*";
            }
          }
          leaf not {
            type empty;
            augex:data-path "not";
          }
        }
        container fragment {
          augex:data-path "fragment";
          augex:value-yang-path "value";
          presence "Config entry.";
          leaf value {
            mandatory true;
            type string {
              pattern "(![ \t]*)?[^ \t\n!-][^ \t\n]*";
            }
          }
          leaf not {
            type empty;
            augex:data-path "not";
          }
        }
        leaf match {
          type string {
            pattern "(![ \t]*)?[^ \t\n!-][^ \t\n]*";
          }
          augex:data-path "match";
        }
        container tcp-flags {
          augex:data-path "tcp-flags";
          presence "Config entry.";
          leaf-list mask {
            min-elements 1;
            type string {
              pattern "SYN|ACK|FIN|RST|URG|PSH|ALL|NONE";
            }
            ordered-by user;
            augex:data-path "mask";
          }
          leaf-list set {
            min-elements 1;
            type string {
              pattern "SYN|ACK|FIN|RST|URG|PSH|ALL|NONE";
            }
            ordered-by user;
            augex:data-path "set";
          }
        }
        container node {
          augex:data-path "$$";
          augex:value-yang-path "value";
          presence "Config entry.";
          leaf label {
            mandatory true;
            type string {
              pattern "destinatio((n[0-9A-Za-z-]|[0-9A-Za-mo-z-])[0-9A-Za-z-]*|())|destinati([0-9A-Za-np-z-][0-9A-Za-z-]*|())|destinat([0-9A-Za-hj-z-][0-9A-Za-z-]*|())|destina([0-9A-Za-su-z-][0-9A-Za-z-]*|())|destin([0-9A-Zb-z-][0-9A-Za-z-]*|())|desti([0-9A-Za-mo-z-][0-9A-Za-z-]*|())|dest([0-9A-Za-hj-z-][0-9A-Za-z-]*|())|des([0-9A-Za-su-z-][0-9A-Za-z-]*|())|de([0-9A-Za-rt-z-][0-9A-Za-z-]*|())|fragmen((t[0-9A-Za-z-]|[0-9A-Za-su-z-])[0-9A-Za-z-]*|())|fragme([0-9A-Za-mo-z-][0-9A-Za-z-]*|())|fragm([0-9A-Za-df-z-][0-9A-Za-z-]*|())|frag([0-9A-Za-ln-z-][0-9A-Za-z-]*|())|fra([0-9A-Za-fh-z-][0-9A-Za-z-]*|())|fr([0-9A-Zb-z-][0-9A-Za-z-]*|())|got((o[0-9A-Za-z-]|[0-9A-Za-np-z-])[0-9A-Za-z-]*|())|go([0-9A-Za-su-z-][0-9A-Za-z-]*|())|in-interfac((e[0-9A-Za-z-]|[0-9A-Za-df-z-])[0-9A-Za-z-]*|())|in-interfa([0-9A-Zabd-z-][0-9A-Za-z-]*|())|in-interf([0-9A-Zb-z-][0-9A-Za-z-]*|())|in-inter([0-9A-Za-eg-z-][0-9A-Za-z-]*|())|in-inte([0-9A-Za-qs-z-][0-9A-Za-z-]*|())|in-int([0-9A-Za-df-z-][0-9A-Za-z-]*|())|in-in([0-9A-Za-su-z-][0-9A-Za-z-]*|())|in-i([0-9A-Za-mo-z-][0-9A-Za-z-]*|())|in-([0-9A-Za-hj-z-][0-9A-Za-z-]*|())|in([0-9A-Za-z][0-9A-Za-z-]*|())|jum((p[0-9A-Za-z-]|[0-9A-Za-oq-z-])[0-9A-Za-z-]*|())|ju([0-9A-Za-ln-z-][0-9A-Za-z-]*|())|matc((h[0-9A-Za-z-]|[0-9A-Za-gi-z-])[0-9A-Za-z-]*|())|mat([0-9A-Zabd-z-][0-9A-Za-z-]*|())|ma([0-9A-Za-su-z-][0-9A-Za-z-]*|())|out-interfac((e[0-9A-Za-z-]|[0-9A-Za-df-z-])[0-9A-Za-z-]*|())|out-interfa([0-9A-Zabd-z-][0-9A-Za-z-]*|())|out-interf([0-9A-Zb-z-][0-9A-Za-z-]*|())|out-inter([0-9A-Za-eg-z-][0-9A-Za-z-]*|())|out-inte([0-9A-Za-qs-z-][0-9A-Za-z-]*|())|out-int([0-9A-Za-df-z-][0-9A-Za-z-]*|())|out-in([0-9A-Za-su-z-][0-9A-Za-z-]*|())|out-i([0-9A-Za-mo-z-][0-9A-Za-z-]*|())|out-([0-9A-Za-hj-z-][0-9A-Za-z-]*|())|out([0-9A-Za-z][0-9A-Za-z-]*|())|ou([0-9A-Za-su-z-][0-9A-Za-z-]*|())|protoco((l[0-9A-Za-z-]|[0-9A-Za-km-z-])[0-9A-Za-z-]*|())|protoc([0-9A-Za-np-z-][0-9A-Za-z-]*|())|proto([0-9A-Zabd-z-][0-9A-Za-z-]*|())|prot([0-9A-Za-np-z-][0-9A-Za-z-]*|())|pro([0-9A-Za-su-z-][0-9A-Za-z-]*|())|pr([0-9A-Za-np-z-][0-9A-Za-z-]*|())|sourc((e[0-9A-Za-z-]|[0-9A-Za-df-z-])[0-9A-Za-z-]*|())|sour([0-9A-Zabd-z-][0-9A-Za-z-]*|())|sou([0-9A-Za-qs-z-][0-9A-Za-z-]*|())|so([0-9A-Za-tv-z-][0-9A-Za-z-]*|())|tcp-flag((s[0-9A-Za-z-]|[0-9A-Za-rt-z-])[0-9A-Za-z-]*|())|tcp-fla([0-9A-Za-fh-z-][0-9A-Za-z-]*|())|tcp-fl([0-9A-Zb-z-][0-9A-Za-z-]*|())|tcp-f([0-9A-Za-km-z-][0-9A-Za-z-]*|())|tcp-([0-9A-Za-eg-z-][0-9A-Za-z-]*|())|tcp([0-9A-Za-z][0-9A-Za-z-]*|())|(tc[0-9A-Za-oq-z-]|(t[0-9A-Zabd-z-]|s[0-9A-Za-np-z-]|p[0-9A-Za-qs-z-]|o[0-9A-Za-tv-z-]|m[0-9A-Zb-z-]|j[0-9A-Za-tv-z-]|i[0-9A-Za-mo-z-]|g[0-9A-Za-np-z-]|f[0-9A-Za-qs-z-]|d[0-9A-Za-df-z-]|[A-Za-cehklnqru-z-][0-9A-Za-z-])[0-9A-Za-z-])[0-9A-Za-z-]*|tc|t[0-9A-Zabd-z-]|s[0-9A-Za-np-z-]|p[0-9A-Za-qs-z-]|o[0-9A-Za-tv-z-]|m[0-9A-Zb-z-]|j[0-9A-Za-tv-z-]|i[0-9A-Za-mo-z-]|g[0-9A-Za-np-z-]|f[0-9A-Za-qs-z-]|d[0-9A-Za-df-z-]|[A-Za-cehklnqru-z-][0-9A-Za-z-]";
            }
          }
          leaf value {
            type string {
              pattern "([^\" \t\n!-][^ \t\n]*)|\"([^\"\\\n]|\\\\.)*\"";
            }
          }
          leaf not {
            type empty;
            augex:data-path "not";
          }
        }
      }
    }
  }
  list iptables {
    key "config-file";
    leaf config-file {
      type string;
    }
    list table-list {
      key "_id";
      ordered-by user;
      leaf _id {
        type uint64;
        description
          "Implicitly generated list key to maintain the order of the augeas data.";
      }
      container table {
        augex:data-path "table";
        augex:value-yang-path "value";
        presence "Config entry.";
        leaf value {
          mandatory true;
          type string {
            pattern "[a-z]+";
          }
        }
        list config-entries {
          key "_id";
          ordered-by user;
          leaf _id {
            type uint64;
            description
              "Implicitly generated list key to maintain the order of the augeas data.";
          }
          choice ch-config-entries {
            mandatory true;
            container chain {
              augex:data-path "chain";
              augex:value-yang-path "chain-name";
              presence "Config entry.";
              leaf chain-name {
                mandatory true;
                type string {
                  pattern "[A-Za-z0-9_-]+";
                }
              }
              leaf policy {
                mandatory true;
                type string {
                  pattern "ACCEPT|DROP|REJECT|-";
                }
                augex:data-path "policy";
              }
            }
            container append {
              augex:data-path "append";
              augex:value-yang-path "chain-name";
              presence "Config entry.";
              leaf chain-name {
                mandatory true;
                type string {
                  pattern "[A-Za-z0-9_-]+";
                }
              }
              uses ipt-match;
            }
            container insert {
              augex:data-path "insert";
              augex:value-yang-path "chain-name";
              presence "Config entry.";
              leaf chain-name {
                mandatory true;
                type string {
                  pattern "[A-Za-z0-9_-]+";
                }
              }
              uses ipt-match;
            }
          }
        }
      }
    }
  }
}
