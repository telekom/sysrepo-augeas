module anaconda {
  namespace "aug:anaconda";
  prefix aug;

  import augeas-extension {
    prefix augex;
  }

  augex:augeas-mod-name "Anaconda";

  list anaconda {
    key "config-file";
    min-elements 1;
    leaf config-file {
      type string;
    }
    list record {
      key "_id";
      augex:data-path "$$";
      leaf _id {
        type string {
          pattern "#commen((t[^\\]\n/]|[^\\]\n/t])[^\\]\n/]*|)|#comme([^\\]\n/n][^\\]\n/]*|)|#comm([^\\]\n/e][^\\]\n/]*|)|#com([^\\]\n/m][^\\]\n/]*|)|#co([^\\]\n/m][^\\]\n/]*|)|#c([^\\]\n/o][^\\]\n/]*|)|(#[^\\]\n/c]|[^\\]\n#/][^\\]\n/])[^\\]\n/]*|#|[^\\]\n#/]";
        }
      }
      list list {
        key "_id";
        augex:data-path "$$/$$";
        augex:value-yang-path "value";
        leaf _id {
          type string {
            pattern "[A-Za-z][A-Za-z0-9._-]*";
          }
        }
        leaf value {
          type union {
            type string {
              pattern "([^\t\n \"#;])((((([^\n#;])+)*)([^\t\n \"#;])){0,1})";
            }
            type string {
              pattern "(([^\"\n]*)(([;#])+))([^\"\n]*)";
            }
          }
        }
      }
    }
  }
}