module darkice {
  namespace "aug:darkice";
  prefix aug;

  import augeas-extension {
    prefix augex;
  }

  container darkice {
    list record {
      key "value";
      augex:data-path "target";
      leaf value {
        type string {
          pattern "[^\\]\n]+";
        }
      }
      list entry_re {
        key "entry_re";
        augex:data-path "target/$$entry_re";
        leaf entry_re {
          type string {
            pattern "[A-Za-z0-9][A-Za-z0-9._-]*";
          }
        }
        choice ch_entry_re {
          case node {
            container node {
              leaf node {
                type string {
                  pattern "([^\t\n \"#;])((((([^\n#;])+)*)([^\t\n \"#;])){0,1})";
                }
                augex:data-path "target/^^entry_re";
              }
            }
          }
          case node2 {
            container node2 {
              leaf node {
                mandatory true;
                type string {
                  pattern "(([^\"\n]*)(([;#])+))([^\"\n]*)";
                }
                augex:data-path "target/^^entry_re";
              }
            }
          }
        }
      }
    }
  }
}