module ssh {
  namespace "aug:ssh";
  prefix aug;

  import augeas-extension {
    prefix augex;
  }

  augex:augeas-mod-name "Ssh";

  grouping ch-send_env {
    choice ch-send_env {
      mandatory true;
      container send_env {
        augex:data-path "SendEnv";
        presence "Config entry.";
        list array_entry-list {
          key "_id";
          ordered-by user;
          leaf _id {
            type uint64;
            description
              "Implicitly generated list key to maintain the order of the augeas data.";
          }
          container array_entry {
            augex:data-path "$$";
            augex:value-yang-path "value_to_spc";
            presence "Config entry.";
            leaf array_entry {
              mandatory true;
              type uint64;
            }
            leaf value_to_spc {
              mandatory true;
              type string {
                pattern "[^ \t\n=][^ \t\n]*";
              }
            }
          }
        }
      }
      leaf ProxyCommand {
        type string {
          pattern "[^ \t\n].*[^ \t\n]|[^ \t\n]";
        }
        augex:data-path "ProxyCommand";
      }
      container remote_fw {
        augex:data-path "RemoteForward";
        presence "Config entry.";
        uses remote_fw;
      }
      container local_fw {
        augex:data-path "LocalForward";
        presence "Config entry.";
        uses remote_fw;
      }
      container macs {
        augex:data-path "MACs";
        presence "Config entry.";
        uses commas_entry-list;
      }
      container ciphers {
        augex:data-path "Ciphers";
        presence "Config entry.";
        uses commas_entry-list;
      }
      container HostKeyAlgorithms {
        augex:data-path "HostKeyAlgorithms";
        presence "Config entry.";
        uses commas_entry-list;
      }
      container KexAlgorithms {
        augex:data-path "KexAlgorithms";
        presence "Config entry.";
        uses commas_entry-list;
      }
      container pubkey_accepted_key_types {
        augex:data-path "PubkeyAcceptedKeyTypes";
        presence "Config entry.";
        uses commas_entry-list;
      }
      container global_knownhosts_file {
        augex:data-path "GlobalKnownHostsFile";
        presence "Config entry.";
        list spaces_entry-list {
          key "_id";
          min-elements 1;
          ordered-by user;
          leaf _id {
            type uint64;
            description
              "Implicitly generated list key to maintain the order of the augeas data.";
          }
          container spaces_entry {
            augex:data-path "$$";
            augex:value-yang-path "value_to_spc";
            presence "Config entry.";
            leaf spaces_entry {
              mandatory true;
              type uint64;
            }
            leaf value_to_spc {
              mandatory true;
              type string {
                pattern "[^ \t\n=][^ \t\n]*";
              }
            }
          }
        }
      }
      container rekey_limit {
        augex:data-path "RekeyLimit";
        presence "Config entry.";
        leaf amount {
          mandatory true;
          type string {
            pattern "[^ \t\n=][^ \t\n]*";
          }
          augex:data-path "amount";
        }
        leaf duration {
          type string {
            pattern "[^ \t\n=][^ \t\n]*";
          }
          augex:data-path "duration";
        }
      }
      container other_entry {
        augex:data-path "$$";
        augex:value-yang-path "value_to_spc";
        presence "Config entry.";
        leaf key_re {
          mandatory true;
          type string {
            pattern "[Cc][Ii][Pp][Hh][Ee][Rr](([Ss][0-9A-Za-z]|[0-9A-RT-Za-rt-z])[0-9A-Za-z]*|())|[Cc][Ii][Pp][Hh][Ee]([0-9A-QS-Za-qs-z][0-9A-Za-z]*|())|[Cc][Ii][Pp][Hh]([0-9A-DF-Za-df-z][0-9A-Za-z]*|())|[Cc][Ii][Pp]([0-9A-GI-Za-gi-z][0-9A-Za-z]*|())|[Cc][Ii]([0-9A-OQ-Za-oq-z][0-9A-Za-z]*|())|[Gg][Ll][Oo][Bb][Aa][Ll][Kk][Nn][Oo][Ww][Nn][Hh][Oo][Ss][Tt][Ss][Ff][Ii][Ll](([Ee][0-9A-Za-z]|[0-9A-DF-Za-df-z])[0-9A-Za-z]*|())|[Gg][Ll][Oo][Bb][Aa][Ll][Kk][Nn][Oo][Ww][Nn][Hh][Oo][Ss][Tt][Ss][Ff][Ii]([0-9A-KM-Za-km-z][0-9A-Za-z]*|())|[Gg][Ll][Oo][Bb][Aa][Ll][Kk][Nn][Oo][Ww][Nn][Hh][Oo][Ss][Tt][Ss][Ff]([0-9A-HJ-Za-hj-z][0-9A-Za-z]*|())|[Gg][Ll][Oo][Bb][Aa][Ll][Kk][Nn][Oo][Ww][Nn][Hh][Oo][Ss][Tt][Ss]([0-9A-EG-Za-eg-z][0-9A-Za-z]*|())|[Gg][Ll][Oo][Bb][Aa][Ll][Kk][Nn][Oo][Ww][Nn][Hh][Oo][Ss][Tt]([0-9A-RT-Za-rt-z][0-9A-Za-z]*|())|[Gg][Ll][Oo][Bb][Aa][Ll][Kk][Nn][Oo][Ww][Nn][Hh][Oo][Ss]([0-9A-SU-Za-su-z][0-9A-Za-z]*|())|[Gg][Ll][Oo][Bb][Aa][Ll][Kk][Nn][Oo][Ww][Nn][Hh][Oo]([0-9A-RT-Za-rt-z][0-9A-Za-z]*|())|[Gg][Ll][Oo][Bb][Aa][Ll][Kk][Nn][Oo][Ww][Nn][Hh]([0-9A-NP-Za-np-z][0-9A-Za-z]*|())|[Gg][Ll][Oo][Bb][Aa][Ll][Kk][Nn][Oo][Ww][Nn]([0-9A-GI-Za-gi-z][0-9A-Za-z]*|())|[Gg][Ll][Oo][Bb][Aa][Ll][Kk][Nn][Oo][Ww]([0-9A-MO-Za-mo-z][0-9A-Za-z]*|())|[Gg][Ll][Oo][Bb][Aa][Ll][Kk][Nn][Oo]([0-9A-VX-Za-vx-z][0-9A-Za-z]*|())|[Gg][Ll][Oo][Bb][Aa][Ll][Kk][Nn]([0-9A-NP-Za-np-z][0-9A-Za-z]*|())|[Gg][Ll][Oo][Bb][Aa][Ll][Kk]([0-9A-MO-Za-mo-z][0-9A-Za-z]*|())|[Gg][Ll][Oo][Bb][Aa][Ll]([0-9A-JL-Za-jl-z][0-9A-Za-z]*|())|[Gg][Ll][Oo][Bb][Aa]([0-9A-KM-Za-km-z][0-9A-Za-z]*|())|[Gg][Ll][Oo][Bb]([0-9B-Zb-z][0-9A-Za-z]*|())|[Gg][Ll][Oo]([0-9AC-Zac-z][0-9A-Za-z]*|())|[Gg][Ll]([0-9A-NP-Za-np-z][0-9A-Za-z]*|())|[Hh][Oo][Ss][Tt][Kk][Ee][Yy]([Aa][Ll][Gg][Oo][Rr][Ii][Tt][Hh][Mm](([Ss][0-9A-Za-z]|[0-9A-RT-Za-rt-z])[0-9A-Za-z]*|())|[Aa][Ll][Gg][Oo][Rr][Ii][Tt][Hh]([0-9A-LN-Za-ln-z][0-9A-Za-z]*|())|[Aa][Ll][Gg][Oo][Rr][Ii][Tt]([0-9A-GI-Za-gi-z][0-9A-Za-z]*|())|[Aa][Ll][Gg][Oo][Rr][Ii]([0-9A-SU-Za-su-z][0-9A-Za-z]*|())|[Aa][Ll][Gg][Oo][Rr]([0-9A-HJ-Za-hj-z][0-9A-Za-z]*|())|[Aa][Ll][Gg][Oo]([0-9A-QS-Za-qs-z][0-9A-Za-z]*|())|[Aa][Ll][Gg]([0-9A-NP-Za-np-z][0-9A-Za-z]*|())|[Aa][Ll]([0-9A-FH-Za-fh-z][0-9A-Za-z]*|())|[Aa]([0-9A-KM-Za-km-z][0-9A-Za-z]*|())|[0-9B-Zb-z][0-9A-Za-z]*|())|[Hh][Oo][Ss][Tt][Kk][Ee]([0-9A-XZa-xz][0-9A-Za-z]*|())|[Hh][Oo][Ss][Tt][Kk]([0-9A-DF-Za-df-z][0-9A-Za-z]*|())|[Hh][Oo][Ss][Tt][0-9A-JL-Za-jl-z][0-9A-Za-z]*|[Hh][Oo][Ss]([0-9A-SU-Za-su-z][0-9A-Za-z]*|())|[Hh][Oo]([0-9A-RT-Za-rt-z][0-9A-Za-z]*|())|[Kk][Ee][Xx][Aa][Ll][Gg][Oo][Rr][Ii][Tt][Hh][Mm](([Ss][0-9A-Za-z]|[0-9A-RT-Za-rt-z])[0-9A-Za-z]*|())|[Kk][Ee][Xx][Aa][Ll][Gg][Oo][Rr][Ii][Tt][Hh]([0-9A-LN-Za-ln-z][0-9A-Za-z]*|())|[Kk][Ee][Xx][Aa][Ll][Gg][Oo][Rr][Ii][Tt]([0-9A-GI-Za-gi-z][0-9A-Za-z]*|())|[Kk][Ee][Xx][Aa][Ll][Gg][Oo][Rr][Ii]([0-9A-SU-Za-su-z][0-9A-Za-z]*|())|[Kk][Ee][Xx][Aa][Ll][Gg][Oo][Rr]([0-9A-HJ-Za-hj-z][0-9A-Za-z]*|())|[Kk][Ee][Xx][Aa][Ll][Gg][Oo]([0-9A-QS-Za-qs-z][0-9A-Za-z]*|())|[Kk][Ee][Xx][Aa][Ll][Gg]([0-9A-NP-Za-np-z][0-9A-Za-z]*|())|[Kk][Ee][Xx][Aa][Ll]([0-9A-FH-Za-fh-z][0-9A-Za-z]*|())|[Kk][Ee][Xx][Aa]([0-9A-KM-Za-km-z][0-9A-Za-z]*|())|[Kk][Ee][Xx]([0-9B-Zb-z][0-9A-Za-z]*|())|[Kk][Ee]([0-9A-WYZa-wyz][0-9A-Za-z]*|())|[Ll][Oo][Cc][Aa][Ll][Ff][Oo][Rr][Ww][Aa][Rr](([Dd][0-9A-Za-z]|[0-9A-CE-Za-ce-z])[0-9A-Za-z]*|())|[Ll][Oo][Cc][Aa][Ll][Ff][Oo][Rr][Ww][Aa]([0-9A-QS-Za-qs-z][0-9A-Za-z]*|())|[Ll][Oo][Cc][Aa][Ll][Ff][Oo][Rr][Ww]([0-9B-Zb-z][0-9A-Za-z]*|())|[Ll][Oo][Cc][Aa][Ll][Ff][Oo][Rr]([0-9A-VX-Za-vx-z][0-9A-Za-z]*|())|[Ll][Oo][Cc][Aa][Ll][Ff][Oo]([0-9A-QS-Za-qs-z][0-9A-Za-z]*|())|[Ll][Oo][Cc][Aa][Ll][Ff]([0-9A-NP-Za-np-z][0-9A-Za-z]*|())|[Ll][Oo][Cc][Aa][Ll]([0-9A-EG-Za-eg-z][0-9A-Za-z]*|())|[Ll][Oo][Cc][Aa]([0-9A-KM-Za-km-z][0-9A-Za-z]*|())|[Ll][Oo][Cc]([0-9B-Zb-z][0-9A-Za-z]*|())|[Ll][Oo]([0-9ABD-Zabd-z][0-9A-Za-z]*|())|[Mm][Aa][Tt][Cc](([Hh][0-9A-Za-z]|[0-9A-GI-Za-gi-z])[0-9A-Za-z]*|())|[Mm][Aa][Tt]([0-9ABD-Zabd-z][0-9A-Za-z]*|())|[Mm][Aa][Cc](([Ss][0-9A-Za-z]|[0-9A-RT-Za-rt-z])[0-9A-Za-z]*|())|[Mm][Aa]([0-9ABD-SU-Zabd-su-z][0-9A-Za-z]*|())|[Pp][Rr][Oo][Xx][Yy][Cc][Oo][Mm][Mm][Aa][Nn](([Dd][0-9A-Za-z]|[0-9A-CE-Za-ce-z])[0-9A-Za-z]*|())|[Pp][Rr][Oo][Xx][Yy][Cc][Oo][Mm][Mm][Aa]([0-9A-MO-Za-mo-z][0-9A-Za-z]*|())|[Pp][Rr][Oo][Xx][Yy][Cc][Oo][Mm][Mm]([0-9B-Zb-z][0-9A-Za-z]*|())|[Pp][Rr][Oo][Xx][Yy][Cc][Oo][Mm]([0-9A-LN-Za-ln-z][0-9A-Za-z]*|())|[Pp][Rr][Oo][Xx][Yy][Cc][Oo]([0-9A-LN-Za-ln-z][0-9A-Za-z]*|())|[Pp][Rr][Oo][Xx][Yy][Cc]([0-9A-NP-Za-np-z][0-9A-Za-z]*|())|[Pp][Rr][Oo][Xx][Yy]([0-9ABD-Zabd-z][0-9A-Za-z]*|())|[Pp][Rr][Oo][Xx]([0-9A-XZa-xz][0-9A-Za-z]*|())|[Pp][Rr][Oo]([0-9A-WYZa-wyz][0-9A-Za-z]*|())|[Pp][Uu][Bb][Kk][Ee][Yy][Aa][Cc][Cc][Ee][Pp][Tt][Ee][Dd][Kk][Ee][Yy][Tt][Yy][Pp][Ee](([Ss][0-9A-Za-z]|[0-9A-RT-Za-rt-z])[0-9A-Za-z]*|())|[Pp][Uu][Bb][Kk][Ee][Yy][Aa][Cc][Cc][Ee][Pp][Tt][Ee][Dd][Kk][Ee][Yy][Tt][Yy][Pp]([0-9A-DF-Za-df-z][0-9A-Za-z]*|())|[Pp][Uu][Bb][Kk][Ee][Yy][Aa][Cc][Cc][Ee][Pp][Tt][Ee][Dd][Kk][Ee][Yy][Tt][Yy]([0-9A-OQ-Za-oq-z][0-9A-Za-z]*|())|[Pp][Uu][Bb][Kk][Ee][Yy][Aa][Cc][Cc][Ee][Pp][Tt][Ee][Dd][Kk][Ee][Yy][Tt]([0-9A-XZa-xz][0-9A-Za-z]*|())|[Pp][Uu][Bb][Kk][Ee][Yy][Aa][Cc][Cc][Ee][Pp][Tt][Ee][Dd][Kk][Ee][Yy]([0-9A-SU-Za-su-z][0-9A-Za-z]*|())|[Pp][Uu][Bb][Kk][Ee][Yy][Aa][Cc][Cc][Ee][Pp][Tt][Ee][Dd][Kk][Ee]([0-9A-XZa-xz][0-9A-Za-z]*|())|[Pp][Uu][Bb][Kk][Ee][Yy][Aa][Cc][Cc][Ee][Pp][Tt][Ee][Dd][Kk]([0-9A-DF-Za-df-z][0-9A-Za-z]*|())|[Pp][Uu][Bb][Kk][Ee][Yy][Aa][Cc][Cc][Ee][Pp][Tt][Ee][Dd]([0-9A-JL-Za-jl-z][0-9A-Za-z]*|())|[Pp][Uu][Bb][Kk][Ee][Yy][Aa][Cc][Cc][Ee][Pp][Tt][Ee]([0-9A-CE-Za-ce-z][0-9A-Za-z]*|())|[Pp][Uu][Bb][Kk][Ee][Yy][Aa][Cc][Cc][Ee][Pp][Tt]([0-9A-DF-Za-df-z][0-9A-Za-z]*|())|[Pp][Uu][Bb][Kk][Ee][Yy][Aa][Cc][Cc][Ee][Pp]([0-9A-SU-Za-su-z][0-9A-Za-z]*|())|[Pp][Uu][Bb][Kk][Ee][Yy][Aa][Cc][Cc][Ee]([0-9A-OQ-Za-oq-z][0-9A-Za-z]*|())|[Pp][Uu][Bb][Kk][Ee][Yy][Aa][Cc][Cc]([0-9A-DF-Za-df-z][0-9A-Za-z]*|())|[Pp][Uu][Bb][Kk][Ee][Yy][Aa][Cc]([0-9ABD-Zabd-z][0-9A-Za-z]*|())|[Pp][Uu][Bb][Kk][Ee][Yy][Aa]([0-9ABD-Zabd-z][0-9A-Za-z]*|())|[Pp][Uu][Bb][Kk][Ee][Yy]([0-9B-Zb-z][0-9A-Za-z]*|())|[Pp][Uu][Bb][Kk][Ee]([0-9A-XZa-xz][0-9A-Za-z]*|())|[Pp][Uu][Bb][Kk]([0-9A-DF-Za-df-z][0-9A-Za-z]*|())|[Pp][Uu][Bb]([0-9A-JL-Za-jl-z][0-9A-Za-z]*|())|[Pp][Uu]([0-9AC-Zac-z][0-9A-Za-z]*|())|[Pp][Rr]([0-9A-NP-Za-np-z][0-9A-Za-z]*|())|[Rr][Ee][Kk][Ee][Yy][Ll][Ii][Mm][Ii](([Tt][0-9A-Za-z]|[0-9A-SU-Za-su-z])[0-9A-Za-z]*|())|[Rr][Ee][Kk][Ee][Yy][Ll][Ii][Mm]([0-9A-HJ-Za-hj-z][0-9A-Za-z]*|())|[Rr][Ee][Kk][Ee][Yy][Ll][Ii]([0-9A-LN-Za-ln-z][0-9A-Za-z]*|())|[Rr][Ee][Kk][Ee][Yy][Ll]([0-9A-HJ-Za-hj-z][0-9A-Za-z]*|())|[Rr][Ee][Kk][Ee][Yy]([0-9A-KM-Za-km-z][0-9A-Za-z]*|())|[Rr][Ee][Kk][Ee]([0-9A-XZa-xz][0-9A-Za-z]*|())|[Rr][Ee][Mm][Oo][Tt][Ee][Ff][Oo][Rr][Ww][Aa][Rr](([Dd][0-9A-Za-z]|[0-9A-CE-Za-ce-z])[0-9A-Za-z]*|())|[Rr][Ee][Mm][Oo][Tt][Ee][Ff][Oo][Rr][Ww][Aa]([0-9A-QS-Za-qs-z][0-9A-Za-z]*|())|[Rr][Ee][Mm][Oo][Tt][Ee][Ff][Oo][Rr][Ww]([0-9B-Zb-z][0-9A-Za-z]*|())|[Rr][Ee][Mm][Oo][Tt][Ee][Ff][Oo][Rr]([0-9A-VX-Za-vx-z][0-9A-Za-z]*|())|[Rr][Ee][Mm][Oo][Tt][Ee][Ff][Oo]([0-9A-QS-Za-qs-z][0-9A-Za-z]*|())|[Rr][Ee][Mm][Oo][Tt][Ee][Ff]([0-9A-NP-Za-np-z][0-9A-Za-z]*|())|[Rr][Ee][Mm][Oo][Tt][Ee]([0-9A-EG-Za-eg-z][0-9A-Za-z]*|())|[Rr][Ee][Mm][Oo][Tt]([0-9A-DF-Za-df-z][0-9A-Za-z]*|())|[Rr][Ee][Mm][Oo]([0-9A-SU-Za-su-z][0-9A-Za-z]*|())|[Rr][Ee][Mm]([0-9A-NP-Za-np-z][0-9A-Za-z]*|())|[Rr][Ee][Kk]([0-9A-DF-Za-df-z][0-9A-Za-z]*|())|[Rr][Ee]([0-9A-JLN-Za-jln-z][0-9A-Za-z]*|())|[Ss][Ee][Nn][Dd][Ee][Nn](([Vv][0-9A-Za-z]|[0-9A-UW-Za-uw-z])[0-9A-Za-z]*|())|[Ss][Ee][Nn][Dd][Ee]([0-9A-MO-Za-mo-z][0-9A-Za-z]*|())|[Ss][Ee][Nn][Dd]([0-9A-DF-Za-df-z][0-9A-Za-z]*|())|[Ss][Ee][Nn]([0-9A-CE-Za-ce-z][0-9A-Za-z]*|())|[Ss][Ee]([0-9A-MO-Za-mo-z][0-9A-Za-z]*|())|([Ss][0-9A-DF-Za-df-z]|[Rr][0-9A-DF-Za-df-z]|[Pp][0-9A-QSTV-Za-qstv-z]|[Mm][0-9B-Zb-z]|[Ll][0-9A-NP-Za-np-z]|[Kk][0-9A-DF-Za-df-z]|[Hh][0-9A-NP-Za-np-z]|[Gg][0-9A-KM-Za-km-z]|[Cc][0-9A-HJ-Za-hj-z]|[0-9ABD-FIJNOQT-Zabd-fijnoqt-z][0-9A-Za-z])[0-9A-Za-z]*|[Ss]|[Rr]|[Pp]|[Mm]|[Ll]|[Kk]|[Hh]|[Gg]|[Cc]|[0-9ABD-FIJNOQT-Zabd-fijnoqt-z]";
          }
        }
        leaf value_to_spc {
          mandatory true;
          type string {
            pattern "[^ \t\n=][^ \t\n]*";
          }
        }
      }
    }
  }
  grouping commas_entry-list {
    list commas_entry-list {
      key "_id";
      min-elements 1;
      ordered-by user;
      leaf _id {
        type uint64;
        description
          "Implicitly generated list key to maintain the order of the augeas data.";
      }
      container commas_entry {
        augex:data-path "$$";
        augex:value-yang-path "value_to_comma";
        presence "Config entry.";
        leaf commas_entry {
          mandatory true;
          type uint64;
        }
        leaf value_to_comma {
          mandatory true;
          type string {
            pattern "[^, \t\n=][^, \t\n]*";
          }
        }
      }
    }
  }
  grouping remote_fw {
    container node {
      augex:data-path "$$";
      augex:value-yang-path "value_to_eol";
      presence "Config entry.";
      leaf label {
        mandatory true;
        type string {
          pattern "[^ \t\n/=][^ \t\n/]*";
        }
      }
      leaf value_to_eol {
        mandatory true;
        type string {
          pattern "[^ \t\n].*[^ \t\n]|[^ \t\n]";
        }
      }
    }
  }
  list ssh {
    key "config-file";
    leaf config-file {
      type string;
    }
    list ch-send_env-list {
      key "_id";
      ordered-by user;
      leaf _id {
        type uint64;
        description
          "Implicitly generated list key to maintain the order of the augeas data.";
      }
      uses ch-send_env;
    }
    list config-entries {
      key "_id";
      ordered-by user;
      leaf _id {
        type uint64;
        description
          "Implicitly generated list key to maintain the order of the augeas data.";
      }
      choice ch_config-entries {
        mandatory true;
        container host {
          augex:data-path "Host";
          augex:value-yang-path "value_to_eol";
          presence "Config entry.";
          leaf value_to_eol {
            mandatory true;
            type string {
              pattern "[^ \t\n].*[^ \t\n]|[^ \t\n]";
            }
          }
          list ch-send_env-list {
            key "_id";
            ordered-by user;
            leaf _id {
              type uint64;
              description
                "Implicitly generated list key to maintain the order of the augeas data.";
            }
            uses ch-send_env;
          }
        }
        container match {
          augex:data-path "Match";
          presence "Config entry.";
          container match_cond {
            augex:data-path "Condition";
            presence "Config entry.";
            list config-entries {
              key "_id";
              min-elements 1;
              ordered-by user;
              leaf _id {
                type uint64;
                description
                  "Implicitly generated list key to maintain the order of the augeas data.";
              }
              container node {
                augex:data-path "$$";
                augex:value-yang-path "value";
                presence "Config entry.";
                leaf label {
                  mandatory true;
                  type string {
                    pattern "[A-Za-z0-9]+";
                  }
                }
                leaf value {
                  mandatory true;
                  type union {
                    type string {
                      pattern "[^\"' \t\n=]+";
                    }
                    type string {
                      pattern "[^\"'\t\n]* [^\"'\t\n]*";
                    }
                  }
                }
              }
            }
          }
          container Settings {
            augex:data-path "Settings";
            presence "Config entry.";
            list ch-send_env-list {
              key "_id";
              min-elements 1;
              ordered-by user;
              leaf _id {
                type uint64;
                description
                  "Implicitly generated list key to maintain the order of the augeas data.";
              }
              uses ch-send_env;
            }
          }
        }
      }
    }
  }
}
